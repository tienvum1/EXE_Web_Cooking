import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { subscribePremium, checkPremiumStatus } from '../../api/premium';
import { toast } from 'react-toastify';
import './PremiumPackages.scss';
import Header from '../../components/header/Header';
import Sidebar from '../../components/sidebar/Sidebar';
import Footer from '../../components/footer/Footer';

const PREMIUM_PRICE = 25000; // Gi√° c·ªë ƒë·ªãnh c·ªßa g√≥i premium

const PremiumPackages = () => {
    const [loading, setLoading] = useState(true);
    const [isPremium, setIsPremium] = useState(false);
    const [processing, setProcessing] = useState(false);
    const [showConfirmModal, setShowConfirmModal] = useState(false);
    const navigate = useNavigate();

    // Ki·ªÉm tra tr·∫°ng th√°i premium
    useEffect(() => {
        const checkPremium = async () => {
            try {
                const response = await checkPremiumStatus();
                setIsPremium(response.data.isPremium);
            } catch (error) {
                toast.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin g√≥i premium');
                console.error('Error checking premium status:', error);
            } finally {
                setLoading(false);
            }
        };
        checkPremium();
    }, []);

    // NgƒÉn cu·ªôn trang khi modal m·ªü
    useEffect(() => {
        if (showConfirmModal) {
            document.body.style.overflow = 'hidden';
        } else {
            document.body.style.overflow = 'auto';
        }
        return () => {
            document.body.style.overflow = 'auto';
        };
    }, [showConfirmModal]);

    // X·ª≠ l√Ω khi nh·∫•n n√∫t ƒëƒÉng k√Ω
    const handleSubscribeClick = () => {
        if (isPremium) {
            toast.info('B·∫°n ƒë√£ l√† th√†nh vi√™n Premium');
            return;
        }
        setShowConfirmModal(true);
    };

    // X·ª≠ l√Ω x√°c nh·∫≠n ƒëƒÉng k√Ω
    const handleConfirmSubscribe = async () => {
        try {
            setProcessing(true);
            setShowConfirmModal(false);
            
            const response = await subscribePremium();
            
            if (response.data.success) {
                toast.success('ƒêƒÉng k√Ω g√≥i premium th√†nh c√¥ng!');
                setIsPremium(true);
                navigate('/profile');
            } else {
                handleSubscriptionError(response.data.message);
            }
        } catch (error) {
            handleSubscriptionError(error.response?.data?.message);
        } finally {
            setProcessing(false);
        }
    };

    // X·ª≠ l√Ω l·ªói ƒëƒÉng k√Ω
    const handleSubscriptionError = (errorMessage) => {
        if (errorMessage?.toLowerCase().includes('insufficient')) {
            toast.error('S·ªë d∆∞ v√≠ kh√¥ng ƒë·ªß ƒë·ªÉ ƒëƒÉng k√Ω g√≥i premium. Vui l√≤ng n·∫°p th√™m ti·ªÅn v√†o v√≠.');
        } else if (errorMessage?.toLowerCase().includes('already premium')) {
            toast.info('B·∫°n ƒë√£ l√† th√†nh vi√™n Premium');
            setIsPremium(true);
        } else {
            toast.error(errorMessage || 'L·ªói khi ƒëƒÉng k√Ω g√≥i premium');
        }
    };

    // X·ª≠ l√Ω h·ªßy ƒëƒÉng k√Ω
    const handleCancelSubscribe = () => {
        setShowConfirmModal(false);
    };

    // Danh s√°ch t√≠nh nƒÉng premium
    const premiumFeatures = [
        {
            icon: 'üîç',
            title: 'B·ªô l·ªçc n√¢ng cao',
            description: 'T√¨m ki·∫øm c√¥ng th·ª©c v·ªõi nhi·ªÅu ti√™u ch√≠ h∆°n nh∆∞ th·ªùi gian n·∫•u, calories, nguy√™n li·ªáu...'
        },
        {
            icon: 'üìã',
            title: 'G·ª£i √Ω menu',
            description: 'Nh·∫≠n g·ª£i √Ω menu h√†ng tu·∫ßn ph√π h·ª£p v·ªõi s·ªü th√≠ch v√† nhu c·∫ßu c·ªßa b·∫°n'
        },
        {
            icon: 'üíæ',
            title: 'L∆∞u kh√¥ng gi·ªõi h·∫°n',
            description: 'L∆∞u tr·ªØ c√¥ng th·ª©c y√™u th√≠ch kh√¥ng gi·ªõi h·∫°n (G√≥i th∆∞·ªùng ch·ªâ ƒë∆∞·ª£c l∆∞u 5 m√≥n)'
        },
        {
            icon: 'üì±',
            title: 'T·∫£i c√¥ng th·ª©c offline',
            description: 'T·∫£i c√¥ng th·ª©c v·ªÅ ƒë·ªÉ xem offline, kh√¥ng c·∫ßn k·∫øt n·ªëi internet'
        },
        {
            icon: '‚≠ê',
            title: '∆Øu ti√™n h·ªó tr·ª£',
            description: 'ƒê∆∞·ª£c ∆∞u ti√™n h·ªó tr·ª£ v√† gi·∫£i ƒë√°p th·∫Øc m·∫Øc t·ª´ ƒë·ªôi ng≈© chuy√™n gia'
        }
    ];

    return (
        <>
            <Header />
            <Sidebar />
            <div className="premium-packages">
                <div className="premium-header">
                    <h1>N√¢ng c·∫•p t√†i kho·∫£n Premium</h1>
                    <p>M·ªü kh√≥a t·∫•t c·∫£ t√≠nh nƒÉng ƒë·∫∑c bi·ªát v·ªõi g√≥i premium</p>
                </div>

                {isPremium && (
                    <div className="premium-badge">
                        <span>B·∫°n ƒëang s·ª≠ d·ª•ng t√†i kho·∫£n Premium</span>
                    </div>
                )}

                <div className="premium-content">
                    <div className="premium-features">
                        <h2>T√≠nh nƒÉng Premium</h2>
                        <div className="features-grid">
                            {premiumFeatures.map((feature, index) => (
                                <div key={index} className="feature-card">
                                    <div className="feature-icon">{feature.icon}</div>
                                    <h3>{feature.title}</h3>
                                    <p>{feature.description}</p>
                                </div>
                            ))}
                        </div>
                    </div>

                    <div className="premium-pricing">
                        <div className="pricing-card">
                            <div className="pricing-header">
                                <h2>G√≥i Premium</h2>
                                <div className="price">
                                    <span className="amount">{PREMIUM_PRICE.toLocaleString('vi-VN')}‚Ç´</span>
                                    <span className="period">/th√°ng</span>
                                </div>
                            </div>

                            <div className="pricing-description">
                                <p>Ph√≠ ƒëƒÉng k√Ω {PREMIUM_PRICE.toLocaleString('vi-VN')}‚Ç´/th√°ng. M·ªói th√°ng b·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω ti·∫øp n·∫øu c√≥ nhu c·∫ßu s·ª≠ d·ª•ng. B·∫°n c√≥ th·ªÉ hu·ª∑ b·∫•t k·ª≥ l√∫c n√†o trong ph·∫ßn C√†i ƒê·∫∑t.</p>
                            </div>

                            <div className="pricing-features">
                                <ul>
                                    {premiumFeatures.map((feature, index) => (
                                        <li key={index}>
                                            <i className="fas fa-check"></i>
                                            {feature.title}
                                        </li>
                                    ))}
                                </ul>
                            </div>

                            <button
                                className={`subscribe-button ${isPremium ? 'disabled' : ''} ${processing ? 'processing' : ''}`}
                                onClick={handleSubscribeClick}
                                disabled={isPremium || processing}
                            >
                                {processing ? 'ƒêang x·ª≠ l√Ω...' : isPremium ? 'ƒê√£ ƒëƒÉng k√Ω' : 'ƒêƒÉng k√Ω ngay'}
                            </button>
                        </div>
                    </div>
                </div>

                {showConfirmModal && (
                    <div className="modal-overlay">
                        <div className="modal-content">
                            <div className="modal-header">
                                <h3>X√°c nh·∫≠n ƒëƒÉng k√Ω g√≥i Premium   </h3>
                                <button className="close-button" onClick={handleCancelSubscribe} aria-label="ƒê√≥ng">√ó</button>
                            </div>
                            <div className="modal-body">
                                <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng k√Ω g√≥i Premium v·ªõi gi√° {PREMIUM_PRICE.toLocaleString('vi-VN')}‚Ç´/th√°ng?</p>
                            </div>
                            <div className="modal-buttons">
                                <button 
                                    className="confirm-button"
                                    onClick={handleConfirmSubscribe}
                                    disabled={processing}
                                >
                                    {processing ? 'ƒêang x·ª≠ l√Ω...' : 'C√≥, ƒëƒÉng k√Ω ngay'}
                                </button>
                                <button 
                                    className="cancel-button"
                                    onClick={handleCancelSubscribe}
                                    disabled={processing}
                                >
                                    Kh√¥ng, h·ªßy b·ªè
                                </button>
                            </div>
                        </div>
                    </div>
                )}
            </div>
            <Footer />
        </>
    );
};

export default PremiumPackages;