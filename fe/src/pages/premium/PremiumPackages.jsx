import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { subscribePremium, checkPremiumStatus } from '../../api/premium';
import './PremiumPackages.scss';
import Header from '../../components/header/Header';
import Sidebar from '../../components/sidebar/Sidebar';
import Footer from '../../components/footer/Footer';

const PREMIUM_PRICE = 25000; // Gi√° c·ªë ƒë·ªãnh c·ªßa g√≥i premium

const PremiumPackages = () => {
    const [loading, setLoading] = useState(true);
    const [isPremium, setIsPremium] = useState(false);
    const [processing, setProcessing] = useState(false);
    const [showConfirmModal, setShowConfirmModal] = useState(false);
    const [premiumEndDate, setPremiumEndDate] = useState(null); // New state for end date
    const navigate = useNavigate();

    // Ki·ªÉm tra tr·∫°ng th√°i premium
    useEffect(() => {
        const checkPremium = async () => {
            try {
                const response = await checkPremiumStatus();
                if (response.data) { // Ensure response.data exists
                    setIsPremium(response.data.isPremium); // Assuming isPremium is directly in response.data
                    if (response.data.isPremium && response.data.subscription?.endDate) {
                        setPremiumEndDate(new Date(response.data.subscription.endDate));
                    }
                }
            } catch (error) {
                console.error('Error checking premium status:', error);
            } finally {
                setLoading(false);
            }
        };
        checkPremium();
    }, []);

    // NgƒÉn cu·ªôn trang khi modal m·ªü
    useEffect(() => {
        if (showConfirmModal) {
            document.body.style.overflow = 'hidden';
        } else {
            document.body.style.overflow = 'auto';
        }
        return () => {
            document.body.style.overflow = 'auto';
        };
    }, [showConfirmModal]);

    // X·ª≠ l√Ω khi nh·∫•n n√∫t ƒëƒÉng k√Ω
    const handleSubscribeClick = () => {
        if (isPremium) {
            return;
        }
        setShowConfirmModal(true);
    };

    // X·ª≠ l√Ω x√°c nh·∫≠n ƒëƒÉng k√Ω
    const handleConfirmSubscribe = async () => {
        try {
            setProcessing(true);
            setShowConfirmModal(false);
            
            console.log('Attempting to subscribe to premium...');
            const response = await subscribePremium({
                amount: PREMIUM_PRICE,
                type: 'register_premium',
                transferContent: 'register_premium'
            });
            
            console.log('API response from subscribe:', response);
            console.log('response.data.success from subscribe:', response.success);

            if (response.success == true) {
                console.log('Entering success block...');
                window.alert('ƒêƒÉng k√Ω g√≥i Premium th√†nh c√¥ng!');
                setIsPremium(true);
                setPremiumEndDate(new Date(response.data.data.subscription.endDate)); // Update end date on successful subscription
                setTimeout(() => {
                    navigate('/profile');
                }, 2000);
            } else {
                console.log('Entering error block (response.data.success is false) from subscribe...');
                handleSubscriptionError(response.data);
            }
        } catch (error) {
            console.log('Entering catch block from subscribe...');
            console.log('Error response from subscribe:', error.response);
            handleSubscriptionError(error.response?.data || { message: 'ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.' });
        } finally {
            setProcessing(false);
        }
    };

    // X·ª≠ l√Ω l·ªói ƒëƒÉng k√Ω
    const handleSubscriptionError = (errorData) => {
        console.log('handleSubscriptionError called with:', errorData);
        const { message, type, data } = errorData || {};

        console.log('Error message from API:', message);
        console.log('Error type from API:', type);
        console.log('Error data from API:', data);

        if (!message) {
            return;
        }

        if (message.toLowerCase().includes('s·ªë d∆∞ v√≠ kh√¥ng ƒë·ªß') || message.toLowerCase().includes('s·ªë d∆∞ kh√¥ng ƒë·ªß')) {
        } else if (message.toLowerCase().includes('ƒë√£ l√† th√†nh vi√™n premium')) {
            setIsPremium(true);
            if (data?.endDate) {
                setPremiumEndDate(new Date(data.endDate));
            }
        }
    };

    // X·ª≠ l√Ω h·ªßy ƒëƒÉng k√Ω
    const handleCancelSubscribe = () => {
        setShowConfirmModal(false);
    };

    // Danh s√°ch t√≠nh nƒÉng premium
    const premiumFeatures = [
        {
            icon: '‚úÖ',
            title: 'G·ª£i √Ω th·ª±c ƒë∆°n n√¢ng cao',
            description: 'Nh·∫≠n c√°c g·ª£i √Ω th·ª±c ƒë∆°n ƒë∆∞·ª£c c√° nh√¢n h√≥a v√† ƒëa d·∫°ng h∆°n.'
        },
        {
            icon: 'üíæ',
            title: 'L∆∞u c√¥ng th·ª©c kh√¥ng gi·ªõi h·∫°n',
            description: 'L∆∞u tr·ªØ c√¥ng th·ª©c y√™u th√≠ch kh√¥ng gi·ªõi h·∫°n (G√≥i th∆∞·ªùng ch·ªâ ƒë∆∞·ª£c l∆∞u 5 m√≥n).',
        },
        {
            icon: 'üõ°Ô∏è',
            title: 'H·ªó tr·ª£ ∆∞u ti√™n',
            description: 'Nh·∫≠n ƒë∆∞·ª£c s·ª± h·ªó tr·ª£ nhanh ch√≥ng v√† ∆∞u ti√™n t·ª´ ƒë·ªôi ng≈© c·ªßa ch√∫ng t√¥i.'
        },
        {
            icon: 'üîì',
            title: 'Truy c·∫≠p kh√¥ng gi·ªõi h·∫°n',
            description: 'Truy c·∫≠p t·∫•t c·∫£ c√°c c√¥ng th·ª©c n·∫•u ƒÉn v√† t√≠nh nƒÉng m√† kh√¥ng c√≥ gi·ªõi h·∫°n.'
        },
        {
            icon: 'üö´',
            title: 'Tr·∫£i nghi·ªám kh√¥ng qu·∫£ng c√°o',
            description: 'T·∫≠n h∆∞·ªüng ·ª©ng d·ª•ng m√† kh√¥ng b·ªã gi√°n ƒëo·∫°n b·ªüi qu·∫£ng c√°o.'
        },
        {
            icon: 'üí∞',
            title: '∆Øu ƒë√£i ƒë·∫∑c bi·ªát',
            description: 'Nh·∫≠n c√°c ∆∞u ƒë√£i v√† khuy·∫øn m√£i ƒë·ªôc quy·ªÅn ch·ªâ d√†nh cho th√†nh vi√™n Premium.'
        }
    ];

    if (loading) {
        return (
            <div className="loading-container">
                <p>ƒêang t·∫£i...</p>
            </div>
        );
    }

    return (
        <>
            <Header />
            <Sidebar />
            <div className="premium-packages">
                <div className="premium-header">
                    <h1>N√¢ng c·∫•p t√†i kho·∫£n Premium</h1>
                    <p>M·ªü kh√≥a t·∫•t c·∫£ t√≠nh nƒÉng ƒë·∫∑c bi·ªát v·ªõi g√≥i premium</p>
                </div>

                {isPremium && (
                    <div className="premium-badge">
                        <span>B·∫°n ƒëang s·ª≠ d·ª•ng t√†i kho·∫£n Premium </span>
                        {premiumEndDate && (
                            <span className="end-date">
                                (H·∫øt h·∫°n: {premiumEndDate.toLocaleDateString('vi-VN')})
                            </span>
                        )}
                    </div>
                )}

                <div className="premium-content">
                    <div className="premium-features">
                        <h2>T√≠nh nƒÉng Premium</h2>
                        <div className="features-grid">
                            {premiumFeatures.map((feature, index) => (
                                <div key={index} className="feature-card">
                                    <h3 className="feature-title">{feature.icon} {feature.title}</h3>
                                    <p className="feature-description">{feature.description}</p>
                                </div>
                            ))}
                        </div>
                    </div>

                    <div className="premium-pricing">
                        <div className="pricing-card">
                            <div className="pricing-header">
                                <h2>G√≥i Premium</h2>
                                <div className="price">
                                    <span className="amount">{PREMIUM_PRICE.toLocaleString('vi-VN')}‚Ç´</span>
                                    <span className="period">/th√°ng</span>
                                </div>
                            </div>

                            <div className="pricing-description">
                                <p>Ph√≠ ƒëƒÉng k√Ω {PREMIUM_PRICE.toLocaleString('vi-VN')}‚Ç´/th√°ng. M·ªói th√°ng b·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω ti·∫øp n·∫øu c√≥ nhu c·∫ßu s·ª≠ d·ª•ng. B·∫°n c√≥ th·ªÉ hu·ª∑ b·∫•t k·ª≥ l√∫c n√†o trong ph·∫ßn C√†i ƒê·∫∑t.</p>
                            </div>

                            <div className="pricing-features">
                                <ul>
                                    {premiumFeatures.map((feature, index) => (
                                        <li key={index}>
                                            <i className="fas fa-check"></i> {feature.title}
                                        </li>
                                    ))}
                                </ul>
                            </div>

                            <button
                                className={`subscribe-button ${isPremium ? 'disabled' : ''} ${processing ? 'processing' : ''}`}
                                onClick={handleSubscribeClick}
                                disabled={isPremium || processing}
                            >
                                {processing ? 'ƒêang x·ª≠ l√Ω...' : isPremium ? 'ƒê√£ ƒëƒÉng k√Ω' : 'ƒêƒÉng k√Ω ngay'}
                            </button>
                        </div>
                    </div>
                </div>

                {showConfirmModal && (
                    <div className="modal-overlay" role="dialog" aria-modal="true" aria-labelledby="modal-title">
                        <div className="modal-content">
                            <div className="modal-header">
                                <h3 id="modal-title">X√°c nh·∫≠n ƒëƒÉng k√Ω g√≥i Premium</h3>
                                <button className="close-button" onClick={handleCancelSubscribe} aria-label="ƒê√≥ng">√ó</button>
                            </div>
                            <div className="modal-body">
                                <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng k√Ω g√≥i Premium v·ªõi gi√° {PREMIUM_PRICE.toLocaleString('vi-VN')}‚Ç´ kh√¥ng?</p>
                                <p>G√≥i n√†y s·∫Ω c√≥ hi·ªáu l·ª±c trong 30 ng√†y.</p>
                            </div>
                            <div className="modal-footer">
                                <button className="cancel-button" onClick={handleCancelSubscribe} disabled={processing}>H·ªßy</button>
                                <button className="confirm-button" onClick={handleConfirmSubscribe} disabled={processing}>
                                    {processing ? 'ƒêang x√°c nh·∫≠n...' : 'X√°c nh·∫≠n'}
                                </button>
                            </div>
                        </div>
                    </div>
                )}
            </div>
            <Footer />
            <ToastContainer
                position="top-center"
                autoClose={5000}
                hideProgressBar={false}
                newestOnTop
                closeOnClick
                rtl={false}
                pauseOnFocusLoss
                draggable
                pauseOnHover
                theme="light"
            />
        </>
    );
};

export default PremiumPackages;